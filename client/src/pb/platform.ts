/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: platform.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace proto {
    export class NewPlatform extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unitName?: string;
            unitClass?: string;
            operation_field?: string;
            generalCategory?: string;
            generalType?: string;
            lethalityLevel?: string;
            cruisingSpeed?: number;
            maxSpeed?: number;
            combatRange?: number;
            fuelLoad?: number;
            countryOrigin?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unitName" in data && data.unitName != undefined) {
                    this.unitName = data.unitName;
                }
                if ("unitClass" in data && data.unitClass != undefined) {
                    this.unitClass = data.unitClass;
                }
                if ("operation_field" in data && data.operation_field != undefined) {
                    this.operation_field = data.operation_field;
                }
                if ("generalCategory" in data && data.generalCategory != undefined) {
                    this.generalCategory = data.generalCategory;
                }
                if ("generalType" in data && data.generalType != undefined) {
                    this.generalType = data.generalType;
                }
                if ("lethalityLevel" in data && data.lethalityLevel != undefined) {
                    this.lethalityLevel = data.lethalityLevel;
                }
                if ("cruisingSpeed" in data && data.cruisingSpeed != undefined) {
                    this.cruisingSpeed = data.cruisingSpeed;
                }
                if ("maxSpeed" in data && data.maxSpeed != undefined) {
                    this.maxSpeed = data.maxSpeed;
                }
                if ("combatRange" in data && data.combatRange != undefined) {
                    this.combatRange = data.combatRange;
                }
                if ("fuelLoad" in data && data.fuelLoad != undefined) {
                    this.fuelLoad = data.fuelLoad;
                }
                if ("countryOrigin" in data && data.countryOrigin != undefined) {
                    this.countryOrigin = data.countryOrigin;
                }
            }
        }
        get unitName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set unitName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get unitClass() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set unitClass(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_field() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set operation_field(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get generalCategory() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set generalCategory(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get generalType() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set generalType(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get lethalityLevel() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set lethalityLevel(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get cruisingSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set cruisingSpeed(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get maxSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set maxSpeed(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get combatRange() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set combatRange(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get fuelLoad() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set fuelLoad(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get countryOrigin() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set countryOrigin(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            unitName?: string;
            unitClass?: string;
            operation_field?: string;
            generalCategory?: string;
            generalType?: string;
            lethalityLevel?: string;
            cruisingSpeed?: number;
            maxSpeed?: number;
            combatRange?: number;
            fuelLoad?: number;
            countryOrigin?: string;
        }): NewPlatform {
            const message = new NewPlatform({});
            if (data.unitName != null) {
                message.unitName = data.unitName;
            }
            if (data.unitClass != null) {
                message.unitClass = data.unitClass;
            }
            if (data.operation_field != null) {
                message.operation_field = data.operation_field;
            }
            if (data.generalCategory != null) {
                message.generalCategory = data.generalCategory;
            }
            if (data.generalType != null) {
                message.generalType = data.generalType;
            }
            if (data.lethalityLevel != null) {
                message.lethalityLevel = data.lethalityLevel;
            }
            if (data.cruisingSpeed != null) {
                message.cruisingSpeed = data.cruisingSpeed;
            }
            if (data.maxSpeed != null) {
                message.maxSpeed = data.maxSpeed;
            }
            if (data.combatRange != null) {
                message.combatRange = data.combatRange;
            }
            if (data.fuelLoad != null) {
                message.fuelLoad = data.fuelLoad;
            }
            if (data.countryOrigin != null) {
                message.countryOrigin = data.countryOrigin;
            }
            return message;
        }
        toObject() {
            const data: {
                unitName?: string;
                unitClass?: string;
                operation_field?: string;
                generalCategory?: string;
                generalType?: string;
                lethalityLevel?: string;
                cruisingSpeed?: number;
                maxSpeed?: number;
                combatRange?: number;
                fuelLoad?: number;
                countryOrigin?: string;
            } = {};
            if (this.unitName != null) {
                data.unitName = this.unitName;
            }
            if (this.unitClass != null) {
                data.unitClass = this.unitClass;
            }
            if (this.operation_field != null) {
                data.operation_field = this.operation_field;
            }
            if (this.generalCategory != null) {
                data.generalCategory = this.generalCategory;
            }
            if (this.generalType != null) {
                data.generalType = this.generalType;
            }
            if (this.lethalityLevel != null) {
                data.lethalityLevel = this.lethalityLevel;
            }
            if (this.cruisingSpeed != null) {
                data.cruisingSpeed = this.cruisingSpeed;
            }
            if (this.maxSpeed != null) {
                data.maxSpeed = this.maxSpeed;
            }
            if (this.combatRange != null) {
                data.combatRange = this.combatRange;
            }
            if (this.fuelLoad != null) {
                data.fuelLoad = this.fuelLoad;
            }
            if (this.countryOrigin != null) {
                data.countryOrigin = this.countryOrigin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unitName.length)
                writer.writeString(1, this.unitName);
            if (this.unitClass.length)
                writer.writeString(2, this.unitClass);
            if (this.operation_field.length)
                writer.writeString(3, this.operation_field);
            if (this.generalCategory.length)
                writer.writeString(4, this.generalCategory);
            if (this.generalType.length)
                writer.writeString(5, this.generalType);
            if (this.lethalityLevel.length)
                writer.writeString(6, this.lethalityLevel);
            if (this.cruisingSpeed != 0)
                writer.writeFloat(7, this.cruisingSpeed);
            if (this.maxSpeed != 0)
                writer.writeFloat(8, this.maxSpeed);
            if (this.combatRange != 0)
                writer.writeFloat(9, this.combatRange);
            if (this.fuelLoad != 0)
                writer.writeFloat(10, this.fuelLoad);
            if (this.countryOrigin.length)
                writer.writeString(11, this.countryOrigin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewPlatform {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewPlatform();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unitName = reader.readString();
                        break;
                    case 2:
                        message.unitClass = reader.readString();
                        break;
                    case 3:
                        message.operation_field = reader.readString();
                        break;
                    case 4:
                        message.generalCategory = reader.readString();
                        break;
                    case 5:
                        message.generalType = reader.readString();
                        break;
                    case 6:
                        message.lethalityLevel = reader.readString();
                        break;
                    case 7:
                        message.cruisingSpeed = reader.readFloat();
                        break;
                    case 8:
                        message.maxSpeed = reader.readFloat();
                        break;
                    case 9:
                        message.combatRange = reader.readFloat();
                        break;
                    case 10:
                        message.fuelLoad = reader.readFloat();
                        break;
                    case 11:
                        message.countryOrigin = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewPlatform {
            return NewPlatform.deserialize(bytes);
        }
    }
    export class Platform extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unitName?: string;
            unitClass?: string;
            operation_field?: string;
            generalCategory?: string;
            generalType?: string;
            lethalityLevel?: string;
            cruisingSpeed?: number;
            maxSpeed?: number;
            combatRange?: number;
            fuelLoad?: number;
            countryOrigin?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unitName" in data && data.unitName != undefined) {
                    this.unitName = data.unitName;
                }
                if ("unitClass" in data && data.unitClass != undefined) {
                    this.unitClass = data.unitClass;
                }
                if ("operation_field" in data && data.operation_field != undefined) {
                    this.operation_field = data.operation_field;
                }
                if ("generalCategory" in data && data.generalCategory != undefined) {
                    this.generalCategory = data.generalCategory;
                }
                if ("generalType" in data && data.generalType != undefined) {
                    this.generalType = data.generalType;
                }
                if ("lethalityLevel" in data && data.lethalityLevel != undefined) {
                    this.lethalityLevel = data.lethalityLevel;
                }
                if ("cruisingSpeed" in data && data.cruisingSpeed != undefined) {
                    this.cruisingSpeed = data.cruisingSpeed;
                }
                if ("maxSpeed" in data && data.maxSpeed != undefined) {
                    this.maxSpeed = data.maxSpeed;
                }
                if ("combatRange" in data && data.combatRange != undefined) {
                    this.combatRange = data.combatRange;
                }
                if ("fuelLoad" in data && data.fuelLoad != undefined) {
                    this.fuelLoad = data.fuelLoad;
                }
                if ("countryOrigin" in data && data.countryOrigin != undefined) {
                    this.countryOrigin = data.countryOrigin;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get unitName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set unitName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get unitClass() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set unitClass(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_field() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set operation_field(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get generalCategory() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set generalCategory(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get generalType() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set generalType(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get lethalityLevel() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set lethalityLevel(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get cruisingSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set cruisingSpeed(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get maxSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set maxSpeed(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get combatRange() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set combatRange(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get fuelLoad() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set fuelLoad(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get countryOrigin() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set countryOrigin(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            unitName?: string;
            unitClass?: string;
            operation_field?: string;
            generalCategory?: string;
            generalType?: string;
            lethalityLevel?: string;
            cruisingSpeed?: number;
            maxSpeed?: number;
            combatRange?: number;
            fuelLoad?: number;
            countryOrigin?: string;
            id?: string;
        }): Platform {
            const message = new Platform({});
            if (data.unitName != null) {
                message.unitName = data.unitName;
            }
            if (data.unitClass != null) {
                message.unitClass = data.unitClass;
            }
            if (data.operation_field != null) {
                message.operation_field = data.operation_field;
            }
            if (data.generalCategory != null) {
                message.generalCategory = data.generalCategory;
            }
            if (data.generalType != null) {
                message.generalType = data.generalType;
            }
            if (data.lethalityLevel != null) {
                message.lethalityLevel = data.lethalityLevel;
            }
            if (data.cruisingSpeed != null) {
                message.cruisingSpeed = data.cruisingSpeed;
            }
            if (data.maxSpeed != null) {
                message.maxSpeed = data.maxSpeed;
            }
            if (data.combatRange != null) {
                message.combatRange = data.combatRange;
            }
            if (data.fuelLoad != null) {
                message.fuelLoad = data.fuelLoad;
            }
            if (data.countryOrigin != null) {
                message.countryOrigin = data.countryOrigin;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                unitName?: string;
                unitClass?: string;
                operation_field?: string;
                generalCategory?: string;
                generalType?: string;
                lethalityLevel?: string;
                cruisingSpeed?: number;
                maxSpeed?: number;
                combatRange?: number;
                fuelLoad?: number;
                countryOrigin?: string;
                id?: string;
            } = {};
            if (this.unitName != null) {
                data.unitName = this.unitName;
            }
            if (this.unitClass != null) {
                data.unitClass = this.unitClass;
            }
            if (this.operation_field != null) {
                data.operation_field = this.operation_field;
            }
            if (this.generalCategory != null) {
                data.generalCategory = this.generalCategory;
            }
            if (this.generalType != null) {
                data.generalType = this.generalType;
            }
            if (this.lethalityLevel != null) {
                data.lethalityLevel = this.lethalityLevel;
            }
            if (this.cruisingSpeed != null) {
                data.cruisingSpeed = this.cruisingSpeed;
            }
            if (this.maxSpeed != null) {
                data.maxSpeed = this.maxSpeed;
            }
            if (this.combatRange != null) {
                data.combatRange = this.combatRange;
            }
            if (this.fuelLoad != null) {
                data.fuelLoad = this.fuelLoad;
            }
            if (this.countryOrigin != null) {
                data.countryOrigin = this.countryOrigin;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unitName.length)
                writer.writeString(1, this.unitName);
            if (this.unitClass.length)
                writer.writeString(2, this.unitClass);
            if (this.operation_field.length)
                writer.writeString(3, this.operation_field);
            if (this.generalCategory.length)
                writer.writeString(4, this.generalCategory);
            if (this.generalType.length)
                writer.writeString(5, this.generalType);
            if (this.lethalityLevel.length)
                writer.writeString(6, this.lethalityLevel);
            if (this.cruisingSpeed != 0)
                writer.writeFloat(7, this.cruisingSpeed);
            if (this.maxSpeed != 0)
                writer.writeFloat(8, this.maxSpeed);
            if (this.combatRange != 0)
                writer.writeFloat(9, this.combatRange);
            if (this.fuelLoad != 0)
                writer.writeFloat(10, this.fuelLoad);
            if (this.countryOrigin.length)
                writer.writeString(11, this.countryOrigin);
            if (this.id.length)
                writer.writeString(12, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Platform {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Platform();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unitName = reader.readString();
                        break;
                    case 2:
                        message.unitClass = reader.readString();
                        break;
                    case 3:
                        message.operation_field = reader.readString();
                        break;
                    case 4:
                        message.generalCategory = reader.readString();
                        break;
                    case 5:
                        message.generalType = reader.readString();
                        break;
                    case 6:
                        message.lethalityLevel = reader.readString();
                        break;
                    case 7:
                        message.cruisingSpeed = reader.readFloat();
                        break;
                    case 8:
                        message.maxSpeed = reader.readFloat();
                        break;
                    case 9:
                        message.combatRange = reader.readFloat();
                        break;
                    case 10:
                        message.fuelLoad = reader.readFloat();
                        break;
                    case 11:
                        message.countryOrigin = reader.readString();
                        break;
                    case 12:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Platform {
            return Platform.deserialize(bytes);
        }
    }
    export class PlatformListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PlatformListRequest {
            const message = new PlatformListRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlatformListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlatformListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlatformListRequest {
            return PlatformListRequest.deserialize(bytes);
        }
    }
    export class PlatformListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            platforms?: Platform[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("platforms" in data && data.platforms != undefined) {
                    this.platforms = data.platforms;
                }
            }
        }
        get platforms() {
            return pb_1.Message.getRepeatedWrapperField(this, Platform, 1) as Platform[];
        }
        set platforms(value: Platform[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            platforms?: ReturnType<typeof Platform.prototype.toObject>[];
        }): PlatformListResponse {
            const message = new PlatformListResponse({});
            if (data.platforms != null) {
                message.platforms = data.platforms.map(item => Platform.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                platforms?: ReturnType<typeof Platform.prototype.toObject>[];
            } = {};
            if (this.platforms != null) {
                data.platforms = this.platforms.map((item: Platform) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.platforms.length)
                writer.writeRepeatedMessage(1, this.platforms, (item: Platform) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlatformListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlatformListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.platforms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Platform.deserialize(reader), Platform));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlatformListResponse {
            return PlatformListResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPlatformServiceService {
        static definition = {
            CreateNewPlatform: {
                path: "/proto.PlatformService/CreateNewPlatform",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewPlatform) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewPlatform.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Platform) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Platform.deserialize(new Uint8Array(bytes))
            },
            GetPlatformList: {
                path: "/proto.PlatformService/GetPlatformList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PlatformListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PlatformListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PlatformListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PlatformListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateNewPlatform(call: grpc_1.ServerUnaryCall<NewPlatform, Platform>, callback: grpc_1.sendUnaryData<Platform>): void;
        abstract GetPlatformList(call: grpc_1.ServerUnaryCall<PlatformListRequest, PlatformListResponse>, callback: grpc_1.sendUnaryData<PlatformListResponse>): void;
    }
    export class PlatformServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedPlatformServiceService.definition, "PlatformService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateNewPlatform: GrpcUnaryServiceInterface<NewPlatform, Platform> = (message: NewPlatform, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Platform>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Platform>, callback?: grpc_1.requestCallback<Platform>): grpc_1.ClientUnaryCall => {
            return super.CreateNewPlatform(message, metadata, options, callback);
        };
        GetPlatformList: GrpcUnaryServiceInterface<PlatformListRequest, PlatformListResponse> = (message: PlatformListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PlatformListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PlatformListResponse>, callback?: grpc_1.requestCallback<PlatformListResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPlatformList(message, metadata, options, callback);
        };
    }
}
